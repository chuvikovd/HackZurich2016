{"version":3,"sources":["messenger.ts"],"names":[],"mappings":";AAEA,yBAAuB,YAAY,CAAC,CAAA;AAEpC;IAOI,mBAAY,EAAmB;QAPnC,iBAoCC;QAhCG,UAAK,GAAgB,EAAE,CAAC;QAOxB,eAAU,GAAG,UAAC,MAAuB;YACjC,IAAI,IAAI,GAAG,gBAAgB,CAAC,KAAI,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;YAChD,IAAI,KAAK,GAAG,KAAI,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;YACrC,EAAE,CAAC,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;gBACb,KAAI,CAAC,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;gBACzB,KAAI,CAAC,EAAE,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;gBAC3B,KAAI,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,EAAE,KAAI,CAAC,KAAK,CAAC,CAAC;YACvC,CAAC;YACD,OAAO,CAAC,GAAG,CAAI,MAAM,CAAC,EAAE,mBAAgB,CAAC,CAAC;QAC9C,CAAC,CAAC;QAEF,YAAO,GAAG,UAAC,OAAgB;YACvB,KAAI,CAAC,EAAE,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;YAC5B,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;YAC1B,KAAI,CAAC,EAAE,CAAC,IAAI,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;QACrC,CAAC,CAAC;QAEF,SAAI,GAAG,UAAC,IAAU,EAAE,MAAuB;YACvC,IAAA,4CAA2D,EAAtD,cAAI,EAAE,gBAAK,CAA4C;YAC5D,IAAI,IAAI,GAAG,KAAI,CAAC,EAAE,CAAC,WAAW,CAAC,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,IAAI,EAAE,IAAI,EAAE,KAAK,CAAC,CAAC;YACjE,MAAM,CAAC,IAAI,CAAC,SAAS,EAAE,EAAC,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAC,CAAC,CAAC;YACjD,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;YACrB,KAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YACtB,OAAO,CAAC,GAAG,CAAI,IAAI,CAAC,IAAI,eAAY,CAAC,CAAC;QAC1C,CAAC,CAAC;QA3BE,IAAI,CAAC,EAAE,GAAG,EAAE,CAAC;QACb,IAAI,CAAC,EAAE,GAAG,IAAI,mBAAQ,CAAC,cAAO,CAAC,CAAC,CAAC;IACrC,CAAC;;IA0BL,gBAAC;AAAD,CApCA,AAoCC,IAAA;AApCY,iBAAS,YAoCrB,CAAA;AAED,0BAA0B,GAAgB,EAAE,MAAuB;IAC/D,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,MAAM,KAAK,MAAM,EAAnB,CAAmB,CAAC,CAAC,CAAC,CAAC,CAAC;AACnD,CAAC;AAED,8CAA8C;AAC9C,qBAAqB,MAAc,EAAE,QAAgB,EAAE,SAAiB;IACpE,IAAI,EAAE,GAAG,MAAM,GAAC,IAAI,CAAC;IACrB,IAAI,IAAI,GAAG,CAAC,CAAC,GAAC,OAAO,CAAC,GAAC,EAAE,CAAC;IAC1B,IAAI,KAAK,GAAG,CAAC,CAAC,GAAC,CAAC,OAAO,GAAC,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,CAAC,GAAC,EAAE,CAAC;IAChD,MAAM,CAAC,EAAC,MAAA,IAAI,EAAE,OAAA,KAAK,EAAC,CAAC;AACzB,CAAC","file":"messenger.js","sourcesContent":["import {Message} from '../client/models/Message';\r\nimport {User} from '../client/models/User';\r\nimport {Database} from './database';\r\n\r\nexport class Messenger {\r\n    history: Array<Message>;\r\n    io: SocketIO.Server;\r\n    test: string;\r\n    users: Array<User> = [];\r\n    db: Database;\r\n\r\n    constructor(io: SocketIO.Server) {\r\n        this.io = io;\r\n        this.db = new Database(() => {});        \r\n    };\r\n    disconnect = (socket: SocketIO.Socket) => {\r\n        let user = findUserBySocket(this.users, socket);\r\n        let index = this.users.indexOf(user);\r\n        if (index > -1) {\r\n            this.users.splice(index);\r\n            this.io.emit('left', user);\r\n            this.io.emit('online', this.users);\r\n        }\r\n        console.log(`${socket.id} disconnected!`);\r\n    };\r\n\r\n    receive = (message: Message) => {\r\n        this.db.addMessage(message);\r\n        console.log(message.user);\r\n        this.io.emit('message', message);\r\n    };\r\n\r\n    join = (user: User, socket: SocketIO.Socket) => {\r\n        let {latX, longX} = mdToLatLong(10000, user.lat, user.long);\r\n        let msgs = this.db.getMessages(user.lat, user.long, latX, longX);\r\n        socket.emit('welcome', {user: user, msgs: msgs});\r\n        user.socket = socket;\r\n        this.users.push(user);\r\n        console.log(`${user.name} connected`);\r\n    };\r\n}\r\n\r\nfunction findUserBySocket(arr: Array<User>, socket: SocketIO.Socket): User {\r\n    return arr.filter(u => u.socket === socket)[0];\r\n}\r\n\r\n//Meters in diameter to latitude and longitude\r\nfunction mdToLatLong(meters: number, latitude: number, longitude: number){\r\n    let km = meters/1000;\r\n    let latX = (1/110.574)*km;\r\n    let longX = (1/(111.320*Math.cos(latitude)))*km;\r\n    return {latX, longX};\r\n}"],"sourceRoot":"/source/"}