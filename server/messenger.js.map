{"version":3,"sources":["messenger.ts"],"names":[],"mappings":";AAEA,yBAAuB,YAAY,CAAC,CAAA;AAEpC;IAOI,mBAAY,EAAmB;QAPnC,iBAoCC;QAhCG,UAAK,GAAgB,EAAE,CAAC;QASxB,eAAU,GAAG,UAAC,MAAuB;YACjC,IAAI,IAAI,GAAG,gBAAgB,CAAC,KAAI,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;YAChD,IAAI,KAAK,GAAG,KAAI,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;YACrC,EAAE,CAAC,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;gBACb,KAAI,CAAC,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;gBACzB,KAAI,CAAC,EAAE,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;gBAC3B,KAAI,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,EAAE,KAAI,CAAC,KAAK,CAAC,CAAC;YACvC,CAAC;YACD,OAAO,CAAC,GAAG,CAAI,MAAM,CAAC,EAAE,mBAAgB,CAAC,CAAC;QAC9C,CAAC,CAAC;QAEF,YAAO,GAAG,UAAC,OAAgB;YACvB,eAAe;YACf,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;YACrB,KAAI,CAAC,EAAE,CAAC,IAAI,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;QACrC,CAAC,CAAC;QAEF,SAAI,GAAG,UAAC,IAAU,EAAE,MAAuB;YACvC,MAAM,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;YAC7B,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;YACrB,KAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YACtB,OAAO,CAAC,GAAG,CAAI,IAAI,CAAC,IAAI,eAAY,CAAC,CAAC;QAC1C,CAAC,CAAC;QA3BE,IAAI,CAAC,EAAE,GAAG,EAAE,CAAC;QACb,IAAI,CAAC,EAAE,GAAG,IAAI,mBAAQ,CAAC;YACnB,2DAA2D;QAC/D,CAAC,CAAC,CAAC;IACP,CAAC;;IAwBL,gBAAC;AAAD,CApCA,AAoCC,IAAA;AApCY,iBAAS,YAoCrB,CAAA;AAED,0BAA0B,GAAgB,EAAE,MAAuB;IAC/D,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,MAAM,KAAK,MAAM,EAAnB,CAAmB,CAAC,CAAC,CAAC,CAAC,CAAC;AACnD,CAAC","file":"messenger.js","sourcesContent":["import {Message} from '../client/models/Message';\r\nimport {User} from '../client/models/User';\r\nimport {Database} from './Database';\r\n\r\nexport class Messenger {\r\n    history: Array<Message>;\r\n    io: SocketIO.Server;\r\n    test: string;\r\n    users: Array<User> = [];\r\n    db: Database;\r\n\r\n    constructor(io: SocketIO.Server) {\r\n        this.io = io;\r\n        this.db = new Database(() => {\r\n            //console.log(this.db.getMessages(10, 10, 5), 'close msg');\r\n        });\r\n    };\r\n    disconnect = (socket: SocketIO.Socket) => {\r\n        let user = findUserBySocket(this.users, socket);\r\n        let index = this.users.indexOf(user);\r\n        if (index > -1) {\r\n            this.users.splice(index);\r\n            this.io.emit('left', user);\r\n            this.io.emit('online', this.users);\r\n        }\r\n        console.log(`${socket.id} disconnected!`);\r\n    };\r\n\r\n    receive = (message: Message) => {\r\n        //TODO: DB save\r\n        console.log(message);\r\n        this.io.emit('message', message);\r\n    };\r\n\r\n    join = (user: User, socket: SocketIO.Socket) => {\r\n        socket.emit('welcome', user);        \r\n        user.socket = socket;\r\n        this.users.push(user);\r\n        console.log(`${user.name} connected`);\r\n    };\r\n}\r\n\r\nfunction findUserBySocket(arr: Array<User>, socket: SocketIO.Socket): User {\r\n    return arr.filter(u => u.socket === socket)[0];\r\n}"],"sourceRoot":"/source/"}